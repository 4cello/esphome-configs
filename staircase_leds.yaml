substitutions:
    devicename: staircase-leds

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  build_path: build/$devicename

wifi:
  ssid: !secret ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$devicename"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

mqtt:
    broker: !secret mqtt_broker 
    topic_prefix: esphome/$devicename
    username: !secret mqtt_username
    password: !secret mqtt_password
    on_message:
        topic: esphome/$devicename/single_led
        qos: 0
        then:
          - light.addressable_set:
                id: staircase_light
                red: 0%
                green: 0%
                blue: 0%
          - light.addressable_set:
                id: staircase_light
                range_from: !lambda return atoi(x.c_str());
                range_to: !lambda return atoi(x.c_str());
                red: 80%
                green: 80%
                blue: 80%

light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: D2
    num_leds: 100
    rgb_order: RGB
    color_correct: [80%, 80%, 80%]
    name: "Staircase Light"
    id: staircase_light
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      - addressable_lambda:
            name: "Mod3"
            update_interval: 50ms
            lambda: |-
                static uint8_t cycle = 0;
                static uint8_t fading = 0;
                static uint8_t dimming = 3;

                if (fading < 50) {
                    it.all().darken(dimming);
                } else if (fading < 100) {
                    it.all().lighten(dimming);
                }
                if (fading == 50) {
                    for (int i = 0; i < it.size(); i++) {
                        switch ((i + cycle) % 3) {
                            case 0:
                                it[i] = Color(100,0,0);
                                break;
                            case 1:
                                it[i] = Color(0,100,0);
                                break;
                            case 2:
                                it[i] = Color(0,0,100);
                                break;
                        }
                    }
                    cycle = (cycle + 1) % 3;
                }
                fading = (fading + 1) % 100;
      - addressable_lambda:
            name: "Flow White"
            update_interval: 50ms
            lambda: |-
                static uint8_t cycle = 0;
                static uint8_t fading = 0;
                static uint8_t dimming = 3;

                const uint8_t w = 80;

                if (fading < 50) {
                    it.all().darken(dimming);
                } else if (fading < 100) {
                    it.all().lighten(dimming);
                }
                if (fading == 50) {
                    for (int i = 0; i < it.size(); i++) {
                        switch ((i + cycle) % 3) {
                            case 0:
                                it[i] = Color(w,w-8,w-10);
                                break;
                            case 1:
                                it[i] = Color(w,w-8,w-25);
                                break;
                            case 2:
                                it[i] = Color(w,w-8,w-10);
                                break;
                        }
                    }
                    cycle = (cycle + 1) % 3;
                }
                fading = (fading + 1) % 100;
