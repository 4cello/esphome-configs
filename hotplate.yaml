substitutions:
  devicename: hotplate
  thermistor_pin: A0
  i2c_sda: D2
  i2c_scl: D1
  ssr_output: D0
  button_stop_pin: D7
  button_stop_light: D8
  button_start_pin: D6
  button_start_light: D5


packages:
  wifi: !include fragments/common/wifi.config.yaml
  device_base: !include fragments/common/device_base.config.yaml

esphome:
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 300
    then:
      - text_sensor.template.publish:
          id: heating_status
          state: "OFF"
      - globals.set:
          id: initial_pid
          value: !lambda return id(hotplate_pid_kp).state;
      - light.turn_on:
          id: btn_start_light
          effect: "None"
      - light.turn_on:
          id: btn_stop_light
          effect: "None"
      - climate.control: 
          id: hotplate_control
          mode: "OFF"
          target_temperature: 5°C

globals:
  - id: initial_pid
    type: float

logger:
  level: DEBUG

binary_sensor:
  - platform: gpio
    id: button_start
    name: "Start Button"
    internal: True
    pin:
      number: $button_start_pin
      inverted: true
      mode:
        input: true
        pullup: true
    on_click: 
      - button.press: solder_138
    on_multi_click: 
      - timing:
          - ON for at least 2s
        then:
          - script.execute: pid_autotune
  - platform: gpio
    id: button_stop
    name: "Stop Button"
    internal: True
    pin:
      number: $button_stop_pin
      inverted: true
      mode:
        input: true
        pullup: true
    on_click: 
      - script.execute: stop_heating
  - platform: template
    id: pid_running
    name: "PID Tuning running"
    on_release: 
      then:
        - globals.set: 
            id: initial_pid
            value: !lambda return id(hotplate_pid_kp).state;

button:
  - platform: template
    id: calibrate_pid
    name: "Calibrate PID"
    icon: "mdi:thermometer-auto"
    on_press:
      - script.execute: pid_autotune
  - platform: template
    id: cool_down
    name: "Cooldown"
    icon: "mdi:snowflake-thermometer"
    on_press:
      - script.execute: stop_heating
  - platform: template
    id: solder_138
    name: "Reflow Soldering 138°C"
    icon: "mdi:heating-coil"
    on_press: 
      - script.execute:
          id: reflow_solder
          preheat_temp: 80
          preheat_duration: 90
          soak_temp: 110
          soak_duration: 60
          peak_duration: 60
          peak_temp: 160

script:
  ##########################################################
  #       SOLDERING ALONG TEMPERATURE CURVE
  ##########################################################
  - id: reflow_solder
    parameters:
      preheat_temp: int #80°C
      preheat_duration: int #90-120s
      soak_temp: int #110°C
      soak_duration: int #30-120s
      peak_duration: int #60-80s
      peak_temp: int #155-175°C
    then:
      ##### Initialize: Stop other scripts
      - script.stop: stop_heating
      - script.stop: pid_autotune
      ##### PREHEAT
      - text_sensor.template.publish:
          id: heating_status
          state: "PREHEAT"
      - sensor.template.publish:
          id: heating_rate
          state: !lambda |-
            float current_temp = id(hotplate_control).current_temperature;
            float rate = (preheat_temp - current_temp) / preheat_duration;
            if (rate < 2.5) {
              return rate;
            } else {
              preheat_duration = (int) ((preheat_temp - current_temp) / 2.5) + 1;
              return 2.5f;
            }
      - sensor.template.publish:
          id: phase_countdown
          state: !lambda return preheat_duration;
      - repeat:
          count: !lambda return preheat_duration;
          then:
            - climate.control:
                id: hotplate_control
                mode: HEAT
                target_temperature: !lambda |-
                  if (id(heating_rate) < 0) return preheat_temp;
                  static float last_temperature = id(hotplate_control).current_temperature;
                  float target = last_temperature + id(heating_rate).state;
                  last_temperature += id(heating_rate).state;
                  return target;
            - delay: 1s
            - sensor.template.publish:
                id: phase_countdown
                state: !lambda return id(phase_countdown).state - 1;
      ##### SOAK
      - text_sensor.template.publish:
          id: heating_status
          state: "SOAK"
      - sensor.template.publish:
          id: heating_rate
          state: !lambda return (soak_temp - id(hotplate_control).current_temperature) / soak_duration;
      - sensor.template.publish:
          id: phase_countdown
          state: !lambda return soak_duration;
      - repeat:
          count: !lambda return soak_duration;
          then:
            - climate.control:
                id: hotplate_control
                mode: HEAT
                target_temperature: !lambda |-
                  if (id(heating_rate) < 0) return soak_temp;
                  static float last_temperature = id(hotplate_control).current_temperature;
                  float target = last_temperature + id(heating_rate).state;
                  last_temperature += id(heating_rate).state;
                  return target;
            - delay: 1s
            - sensor.template.publish:
                id: phase_countdown
                state: !lambda return id(phase_countdown).state - 1;
      ##### REFLOW (PEAK)
      - text_sensor.template.publish:
          id: heating_status
          state: "REFLOW"
      - sensor.template.publish:
          id: heating_rate
          state: 0
      - sensor.template.publish:
          id: phase_countdown
          state: !lambda return peak_duration;
      - climate.control:
          id: hotplate_control
          mode: HEAT
          target_temperature: !lambda return peak_temp;
      - repeat:
          count: !lambda return peak_duration;
          then:
            - delay: 1s
            - sensor.template.publish:
                id: phase_countdown
                state: !lambda return id(phase_countdown).state - 1;
      # COOLDOWN
      - script.execute: stop_heating
  ##########################################################
  #       STOP HEATING
  ##########################################################
  - id: stop_heating
    then:
      - script.stop: pid_autotune
      - script.stop: reflow_solder
      - binary_sensor.template.publish:
          id: pid_running
          state: False
      - sensor.template.publish:
          id: phase_countdown
          state: 0
      - text_sensor.template.publish:
          id: heating_status
          state: "COOLING"
      - climate.control:
          id: hotplate_control
          mode: "OFF"
          target_temperature: 5°C
  ##########################################################
  #       PID AUTOTUNING
  ##########################################################
  - id: pid_autotune
    then:
      - script.stop: stop_heating
      - script.stop: reflow_solder
      - text_sensor.template.publish:
          id: heating_status
          state: "PIDTUNING"
      - climate.control:
          id: hotplate_control
          mode: HEAT
          target_temperature: 180.0
      - delay: 1s
      - binary_sensor.template.publish:
          id: pid_running
          state: True
      - climate.pid.autotune:
          id: hotplate_control
          positive_output: 25%
      - wait_until:
          binary_sensor.is_off: pid_running
      - light.turn_on:
          id: btn_start_light
          effect: "None"
      - script.execute: stop_heating


text_sensor:
  - platform: template
    id: heating_status
    name: "Heating Status"
    on_value: 
      then:
        ##### OFF
        - if: 
            condition:
              text_sensor.state:
                id: heating_status
                state: "OFF"
            then:
              - light.turn_on:
                  id: btn_start_light
                  effect: "None"
              - light.turn_on:
                  id: btn_stop_light
                  effect: "None"
        ##### COOLING
        - if:
            condition:
              text_sensor.state:
                id: heating_status
                state: "COOLING"
            then:
              - light.turn_on:
                  id: btn_start_light
                  effect: "None"
              - light.turn_on:
                  id: btn_stop_light
                  effect: "Slow Pulse"
              - wait_until:
                  sensor.in_range:
                    id: hotplate_temperature
                    below: 40.0
              - text_sensor.template.publish:
                  id: heating_status
                  state: "OFF"
        ##### PREHEAT
        - if:
            condition:
              text_sensor.state:
                id: heating_status
                state: "PREHEAT"
            then:
              - light.turn_on:
                  id: btn_start_light
                  effect: "Fast Pulse"
              - light.turn_on:
                  id: btn_stop_light
                  effect: "None"
        ##### PIDTUNING
        - if:
            condition:
              text_sensor.state:
                id: heating_status
                state: "PIDTUNING"
            then:
              - light.turn_on:
                  id: btn_start_light
                  effect: "Slow Pulse"
              - light.turn_on:
                  id: btn_stop_light
                  effect: "None"


climate:
  - platform: pid
    id: hotplate_control
    name: Hotplate
    sensor: hotplate_temperature
    default_target_temperature: 5°C
    heat_output: heater_output
    visual:
      min_temperature: 0°C
      max_temperature: 240°C
      temperature_step: 1°C
    control_parameters:
      kp: 0.01421
      ki: 0.00078
      kd: 0.06467

sensor:
  ##### Countdown until the current phase is done
  - platform: template
    id: phase_countdown
    unit_of_measurement: "s"
  ##### Heating rate for the current soldering phase (Preheat and Soaking)
  - platform: template
    id: heating_rate
    unit_of_measurement: "°C/s"
  ##### The current PWM output of the hotplate
  - platform: pid
    id: hotplate_pwm
    name: Hotplate PWM
    climate_id: hotplate_control
    type: HEAT
  ##### Thermistor ADC
  - platform: adc
    id: thermistor_sensor
    pin: $thermistor_pin
    update_interval: 1s
    filters:
      - multiply: 3.3
  ##### Thermistor Resistance
  - platform: resistance
    sensor: thermistor_sensor
    configuration: UPSTREAM
    resistor: 4.7kOhm
    id: thermistor_resistance
  ##### Thermistor actual temperature
  - platform: ntc
    name: Hotplate Temperature
    id: hotplate_temperature
    sensor: thermistor_resistance
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 100kOhm
    filters:
      - lambda: if (x > 0) return x; else return 999;
  # PID parameters
  - platform: pid
    id: hotplate_pid_kp
    name: Hotplate PID Kp
    climate_id: hotplate_control
    accuracy_decimals: 5
    unit_of_measurement: ""
    type: KP
    on_value: 
      then:
        - lambda: |-
            if (x != id(initial_pid)) {
              id(pid_running).publish_state(false);
            }
  - platform: pid
    id: hotplate_pid_ki
    name: Hotplate PID Ki
    climate_id: hotplate_control
    accuracy_decimals: 5
    unit_of_measurement: ""
    type: KI
  - platform: pid
    id: hotplate_pid_kd
    name: Hotplate PID Kd
    climate_id: hotplate_control
    accuracy_decimals: 5
    unit_of_measurement: ""
    type: KD

output:
  - id: heater_output
    platform: esp8266_pwm
    pin: $ssr_output
    frequency: 1kHz
    max_power: 0.25
  - id: btn_start_output
    platform: esp8266_pwm
    pin: $button_start_light
  - id: btn_stop_output
    platform: esp8266_pwm
    pin: $button_stop_light

light:
  - platform: monochromatic
    name: "Start Button Light"
    id: btn_start_light
    output: btn_start_output
    internal: True
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.1s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
  - platform: monochromatic
    name: "Stop Button Light"
    id: btn_stop_light
    output: btn_stop_output
    internal: True
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0s
          update_interval: 0.25s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 1.5s

i2c:
  sda: $i2c_sda
  scl: $i2c_scl

display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x27
    update_interval: 0.5s
    lambda: |-
      float target = 5.0f;
      if (id(hotplate_control).mode != esphome::climate::CLIMATE_MODE_OFF) {
        target = id(hotplate_control).target_temperature;
      }
      it.printf("%6.2f/%.2f%cC", id(hotplate_control).current_temperature, target, 0b11011111);
      it.printf(0,1,"%.0f%%", id(hotplate_pwm).state);
      it.printf(6,1,"%s", id(heating_status).state.c_str());
      float countdown = id(phase_countdown).state;
      if (countdown > 0) {
        it.printf(13,1,"%3i", (int) countdown);
      }
